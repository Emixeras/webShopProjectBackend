openapi: 3.0.0
servers:
  - description: local Backend Address
    url: 'http://localhost:8080/'
info:
  description: >-
    Dies ist die API des Webshop Backends Die Enpunkte welche lediglich Basic
    Aut Calls Akzeptieren, enthalten nochmal eine gesonderte Beschreibung
    welcheRechte im Speziellen benötigt werden, dies ist im jeweiligen Enpunkt
    ersichtlich-
  version: 1.0.0
  title: WEBSHOP API
  contact:
    email: mirco_christoph.mueller@edu.fhdw.de
tags:
  - name: user
    description: Operations on User Object
  - name: test
    description: test Api - provides basic test Functions and example Data
  - name: article
    description: Operations on Article Object
  - name: artist
    description: Operations on Artist Objects
  - name: genre
    description: Operations on Genre Objects
paths:
  /user/:
    get:
      security:
        - basicAuth: []
      tags:
        - user
      summary: login api returns user object
      operationId: login
      description: >
        by passing the correct user authentication via basic auth you get a json
        return value containing a json value.
      responses:
        '200':
          $ref: '#/components/responses/UserObject'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      security:
        - basicAuth: []
      tags:
        - user
      summary: updates userinformation and Role assignment
      description: >-
        this endpoint takes the Full or a partial Amount of the User Object, if
        a Role other than user is passed a validation check by the trequesting
        user is performed. if the requesting user is requesting a role assigment
        greater than it's own privileges e.g employee to admin then nothing will
        happen.
      responses:
        '200':
          $ref: '#/components/responses/UserObject'
        '400':
          description: something failed
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        description: Updated user object
        required: true
    post:
      tags:
        - user
      summary: >-
        posts a user Object and stores it in Database could be seen as "register
        new user"
      responses:
        '200':
          $ref: '#/components/responses/UserObject'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        description: Updated user object
        required: true
  '/user/{email}':
    delete:
      security:
        - basicAuth: []
      tags:
        - user
      summary: Delete user
      description: >-
        This can only be done by the logged in user. if run as logged in Admin
        no check will be performed
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful
        '400':
          description: Invalid username supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /user/getAll:
    get:
      security:
        - basicAuth:
            - admin
      tags:
        - user
      summary: returns a list of all users - Admin Only
      responses:
        '200':
          $ref: '#/components/responses/UserArray'
        '400':
          description: Object not existent (worst Case) or authentication failed
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/article/{id}/':
    get:
      tags:
        - article
      summary: get a single Article Object
      description: >-
        this is the Endpoint returning a single Article Object, it converts the
        picture if existent to a binary stream.
      responses:
        '200':
          $ref: '#/components/responses/ArticleObject'
  /article/:
    get:
      summary: gets All Article Metadata Objects
      tags:
        - article
      responses:
        '200':
          $ref: '#/components/responses/ArticleMetadataList'
    post:
      summary: post a new Article Object
      tags:
        - article
      responses:
        '200':
          $ref: '#/components/responses/ArticleObject'
      requestBody:
        $ref: '#/components/requestBodies/UploadArticleWithPicture'
    put:
      summary: post an new Article Object with Picture
      tags:
        - article
      responses:
        '200':
          $ref: '#/components/responses/ArticleObject'
      requestBody:
        $ref: '#/components/requestBodies/UploadArticleWithPicture'
    delete:
      summary: deletes an article with Picture
      tags:
        - article
      responses:
        '200':
          description: success
          content:
            text/plain:
              example: true
  '/artist/{id}':
    get:
      summary: get all single Artist Object
      tags:
        - artist
      responses:
        '200':
          $ref: '#/components/responses/Artist'
  /artist/:
    get:
      summary: get all Artist Objects
      tags:
        - artist
      responses:
        '200':
          $ref: '#/components/responses/ArtistList'
    put:
      summary: 'changed an Article Object, based on the id in the json'
      security:
        - basicAuth: []
      tags:
        - artist
      parameters:
        - $ref: '#/components/responses/Artist'
      responses:
        '200':
          $ref: '#/components/responses/Artist'
    post:
      summary: adds a new Artist Object
      security:
        - basicAuth: []
      tags:
        - artist
      requestBody:
        $ref: '#/components/requestBodies/RegisterArtist'
      responses:
        '200':
          $ref: '#/components/responses/Artist'
    delete:
      summary: löscht einen Artikel
      security:
        - basicAuth: []
      tags:
        - artist
      parameters:
        - $ref: '#/components/responses/Artist'
      responses:
        '200':
          description: success
  '/genre/{id}':
    get:
      summary: get all single Artist Object
      tags:
        - genre
      responses:
        '200':
          $ref: '#/components/responses/Genre'
  /genre/:
    get:
      summary: get all Artist Objects
      tags:
        - genre
      responses:
        '200':
          $ref: '#/components/responses/GenreList'
    put:
      summary: 'changed an Article Object, based on the id in the json'
      security:
        - basicAuth: []
      tags:
        - genre
      responses:
        '200':
          $ref: '#/components/responses/Genre'
    post:
      summary: adds a new Artist Object
      security:
        - basicAuth: []
      tags:
        - genre
      requestBody:
        $ref: '#/components/requestBodies/RegisterGenre'
      responses:
        '200':
          $ref: '#/components/responses/Genre'
    delete:
      summary: löscht einen Artikel
      security:
        - basicAuth: []
      tags:
        - genre
      responses:
        '200':
          description: success
  /test:
    get:
      tags:
        - test
      summary: a simple Hello World Get
      responses:
        '200':
          $ref: '#/components/responses/HelloWorld'
    post:
      tags:
        - test
      summary: a simple post with value in printed in Backend Log
      responses:
        '200':
          $ref: '#/components/responses/HelloWorld'
  /test/userTestData:
    get:
      tags:
        - test
      summary: add init user to database only if they do not exist
      responses:
        '200':
          $ref: '#/components/responses/UserArray'
  /test/getAdmin:
    get:
      security:
        - basicAuth: []
      tags:
        - test
      summary: returns the authenticated admin user
      responses:
        '200':
          description: succesful
          content:
            text/plain:
              schema:
                type: string
                example: admin
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /test/getUser:
    get:
      security:
        - basicAuth: []
      tags:
        - test
      summary: returns the authenticated admin user
      responses:
        '200':
          description: succesful
          content:
            text/plain:
              schema:
                type: string
                example: User
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /test/getEmployee:
    get:
      security:
        - basicAuth: []
      tags:
        - test
      summary: returns the authenticated admin user
      responses:
        '200':
          description: succesful
          content:
            text/plain:
              schema:
                type: string
                example: employee
        '401':
          $ref: '#/components/responses/UnauthorizedError'
components:
  schemas:
    user:
      type: object
      required:
        - email
        - firstName
        - lastName
        - birth
        - password
        - role
      properties:
        id:
          type: number
          description: >-
            Dies ist die Tabellen ID, diese wir nur mitgeliefert ein Explizites
            setzen oder Filtern funktioniert nicht.
        email:
          type: string
          example: test@test.de
        password:
          type: string
          example: Test1234
        firstName:
          type: string
          example: Heinz
        lastName:
          type: string
          example: Mayer
        role:
          type: string
          enum:
            - USER
            - ADMIN
            - EMPLOYEE
          example: USER
        birth:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        street:
          type: string
          example: Amselweg
        streetNumber:
          type: integer
          example: 123
        postalCode:
          type: integer
          example: 33330
        town:
          type: string
          example: Gütersloh
    articleMetadata:
      type: object
      required:
        - title
        - interpret
        - genre
        - price
        - picture
      properties:
        id:
          type: number
        title:
          type: string
          example: Nach Uns Die Sintflut
        artist:
          $ref: '#/components/schemas/Artist'
        price:
          type: number
          example: '12,99'
        description:
          type: string
          example: >-
            Die Single ist nur einseitig bespielt, auf der Rückseite befinden
            sich die eingeritzten Autogramme der Ärzte.
        ean:
          type: number
          example: 5099746311919
        articlegenre:
          $ref: '#/components/schemas/Genre'
    articlePicture:
      type: object
      required: '-picture'
      properties:
        picture:
          type: string
          format: binary
    Genre:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Rock
    Artist:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Die Ärzte
    HelloWorld:
      type: object
      required:
        - value
      properties:
        value:
          type: string
          example: dies ist der Hello World Test
  requestBodies:
    UploadArticleWithPicture:
      description: >-
        Multipart Upload welcher den gleichzeitigen Upload mit einem Bild
        erlaubt
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              ArticleMetadata:
                $ref: '#/components/schemas/articleMetadata'
              fileName:
                type: string
                format: binary
          encoding:
            ArticlePicture:
              contentType: 'image/png, image/jpeg'
    RegisterGenre:
      description: erstellt einen neuen Genre Eintrag
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Genre'
    RegisterArtist:
      description: erstellt einen neuen Artist Eintrag
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Artist'
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
    UserObject:
      description: returning json body with user object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
    UserArray:
      description: successful
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/user'
    HelloWorld:
      description: successful
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HelloWorld'
    ArticleObject:
      description: returning a single Article Object
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              ArticleMetadata:
                $ref: '#/components/schemas/articleMetadata'
              ArticlePicture:
                $ref: '#/components/schemas/articlePicture'
          encoding:
            ArticlePicture:
              contentType: 'image/png, image/jpeg'
    ArticleMetadataList:
      description: Returns a List of All Metadata Objects
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/articleMetadata'
    Artist:
      description: returns single Artist Object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Artist'
    ArtistList:
      description: returns a List of ArtistObjects
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Artist'
    Genre:
      description: returns a single Genre Object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Genre'
    GenreList:
      description: returns a List of GenreObjects
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Genre'
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
