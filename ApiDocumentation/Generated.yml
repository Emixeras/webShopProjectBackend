---
openapi: 3.0.3
info:
  title: Generated API
  version: "1.0"
paths:
  /article:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListArticle'
    put:
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Article:
                  $ref: '#/components/schemas/Article'
                Picture:
                  type: array
                  items:
                    format: byte
                    type: string
      responses:
        "200":
          description: OK
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Article:
                  $ref: '#/components/schemas/Article'
                Picture:
                  type: array
                  items:
                    format: byte
                    type: string
      responses:
        "200":
          description: OK
  /article/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          description: OK
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/ArticleForm'
    delete:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          description: OK
    parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
  /artist:
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Artist:
                  $ref: '#/components/schemas/Artist'
                Picture:
                  type: array
                  items:
                    format: byte
                    type: string
      responses:
        "200":
          description: OK
    delete:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /artist/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistForm'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
  /genre:
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Genre:
                  $ref: '#/components/schemas/Genre'
                Picture:
                  type: array
                  items:
                    format: byte
                    type: string
      responses:
        "200":
          description: OK
    delete:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /genre/{id}:
    get:
      requestBody:
        content:
          application/json:
            schema:
              format: int64
              type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
  /test:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloWorld'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelloWorld'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloWorld'
  /test/admin:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /test/articleTestData:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListArticle'
  /test/employee:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /test/user:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /test/userTestData:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListShopUser'
  /user:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopUser'
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopUser'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopUser'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopUser'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopUser'
  /user/getAll:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListShopUser'
  /user/{email}:
    delete:
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
    parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
components:
  schemas:
    Article:
      type: object
      properties:
        artists:
          $ref: '#/components/schemas/Artist'
        description:
          type: string
        ean:
          format: int32
          type: integer
        genre:
          $ref: '#/components/schemas/Genre'
        id:
          format: int64
          type: integer
        image:
          $ref: '#/components/schemas/Picture'
        price:
          format: double
          type: number
        title:
          type: string
    ListArticle:
      type: array
      items:
        $ref: '#/components/schemas/Article'
    Artist:
      type: object
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
    Genre:
      type: object
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
    Picture:
      type: object
      properties:
        article:
          $ref: '#/components/schemas/ListArticle'
        artist:
          $ref: '#/components/schemas/ListArtist'
        genre:
          $ref: '#/components/schemas/ListGenre'
        id:
          format: int64
          type: integer
    ListArtist:
      type: array
      items:
        $ref: '#/components/schemas/Artist'
    ListGenre:
      type: array
      items:
        $ref: '#/components/schemas/Genre'
    InputStream:
      type: object
    ArticleForm:
      type: object
      properties:
        article:
          $ref: '#/components/schemas/Article'
        file:
          type: array
          items:
            format: byte
            type: string
        fileAsStream:
          $ref: '#/components/schemas/InputStream'
    ArtistForm:
      type: object
      properties:
        artist:
          $ref: '#/components/schemas/Artist'
        file:
          type: array
          items:
            format: byte
            type: string
        fileAsStream:
          $ref: '#/components/schemas/InputStream'
    HelloWorld:
      type: object
      properties:
        value:
          type: string
    ShopUser:
      type: object
      properties:
        birth:
          $ref: '#/components/schemas/Date'
        email:
          pattern: \S
          type: string
          nullable: false
        firstName:
          type: string
        id:
          format: int64
          type: integer
        lastName:
          type: string
        password:
          type: string
        postalCode:
          format: int32
          type: integer
        role:
          $ref: '#/components/schemas/Role'
        street:
          type: string
        streetNumber:
          format: int32
          type: integer
        title:
          $ref: '#/components/schemas/Title'
        town:
          type: string
    ListShopUser:
      type: array
      items:
        $ref: '#/components/schemas/ShopUser'
    Date:
      format: date
      type: string
    Role:
      enum:
        - ADMIN
        - EMPLOYEE
        - USER
      type: string
    Title:
      enum:
        - APACHE
        - BENUTZERDEFINIERT
        - DOKTOR
        - FRAU
        - HERR
        - PROFESSOR
      type: string
